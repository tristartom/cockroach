// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cockroach/proto/config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cockroach/proto/config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace cockroach {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Attributes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Attributes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Replica_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Replica_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeDescriptor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeDescriptor_reflection_ = NULL;
const ::google::protobuf::Descriptor* GCPolicy_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GCPolicy_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcctConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcctConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* PermConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PermConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZoneConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZoneConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* RangeTreeNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RangeTreeNode_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto() {
  protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cockroach/proto/config.proto");
  GOOGLE_CHECK(file != NULL);
  Attributes_descriptor_ = file->message_type(0);
  static const int Attributes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, attrs_),
  };
  Attributes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Attributes_descriptor_,
      Attributes::default_instance_,
      Attributes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Attributes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Attributes));
  Replica_descriptor_ = file->message_type(1);
  static const int Replica_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, node_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, store_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, attrs_),
  };
  Replica_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Replica_descriptor_,
      Replica::default_instance_,
      Replica_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Replica, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Replica));
  RangeDescriptor_descriptor_ = file->message_type(2);
  static const int RangeDescriptor_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, raft_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, start_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, end_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, replicas_),
  };
  RangeDescriptor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeDescriptor_descriptor_,
      RangeDescriptor::default_instance_,
      RangeDescriptor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeDescriptor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeDescriptor));
  GCPolicy_descriptor_ = file->message_type(3);
  static const int GCPolicy_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPolicy, ttl_seconds_),
  };
  GCPolicy_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GCPolicy_descriptor_,
      GCPolicy::default_instance_,
      GCPolicy_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPolicy, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GCPolicy, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GCPolicy));
  AcctConfig_descriptor_ = file->message_type(4);
  static const int AcctConfig_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctConfig, cluster_id_),
  };
  AcctConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcctConfig_descriptor_,
      AcctConfig::default_instance_,
      AcctConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcctConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcctConfig));
  PermConfig_descriptor_ = file->message_type(5);
  static const int PermConfig_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermConfig, read_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermConfig, write_),
  };
  PermConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PermConfig_descriptor_,
      PermConfig::default_instance_,
      PermConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PermConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PermConfig));
  ZoneConfig_descriptor_ = file->message_type(6);
  static const int ZoneConfig_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneConfig, replica_attrs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneConfig, range_min_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneConfig, range_max_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneConfig, gc_),
  };
  ZoneConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZoneConfig_descriptor_,
      ZoneConfig::default_instance_,
      ZoneConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZoneConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZoneConfig));
  RangeTree_descriptor_ = file->message_type(7);
  static const int RangeTree_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTree, root_key_),
  };
  RangeTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeTree_descriptor_,
      RangeTree::default_instance_,
      RangeTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeTree));
  RangeTreeNode_descriptor_ = file->message_type(8);
  static const int RangeTreeNode_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTreeNode, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTreeNode, black_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTreeNode, parent_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTreeNode, left_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTreeNode, right_key_),
  };
  RangeTreeNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RangeTreeNode_descriptor_,
      RangeTreeNode::default_instance_,
      RangeTreeNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTreeNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RangeTreeNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RangeTreeNode));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cockroach_2fproto_2fconfig_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Attributes_descriptor_, &Attributes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Replica_descriptor_, &Replica::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeDescriptor_descriptor_, &RangeDescriptor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GCPolicy_descriptor_, &GCPolicy::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcctConfig_descriptor_, &AcctConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PermConfig_descriptor_, &PermConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZoneConfig_descriptor_, &ZoneConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeTree_descriptor_, &RangeTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RangeTreeNode_descriptor_, &RangeTreeNode::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto() {
  delete Attributes::default_instance_;
  delete Attributes_reflection_;
  delete Replica::default_instance_;
  delete Replica_reflection_;
  delete RangeDescriptor::default_instance_;
  delete RangeDescriptor_reflection_;
  delete GCPolicy::default_instance_;
  delete GCPolicy_reflection_;
  delete AcctConfig::default_instance_;
  delete AcctConfig_reflection_;
  delete PermConfig::default_instance_;
  delete PermConfig_reflection_;
  delete ZoneConfig::default_instance_;
  delete ZoneConfig_reflection_;
  delete RangeTree::default_instance_;
  delete RangeTree_reflection_;
  delete RangeTreeNode::default_instance_;
  delete RangeTreeNode_reflection_;
}

void protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gogoproto::protobuf_AddDesc_gogoproto_2fgogo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034cockroach/proto/config.proto\022\017cockroac"
    "h.proto\032\024gogoproto/gogo.proto\"6\n\nAttribu"
    "tes\022(\n\005attrs\030\001 \003(\tB\031\310\336\037\000\362\336\037\021yaml:\"attrs,"
    "flow\"\"\224\001\n\007Replica\022)\n\007node_id\030\001 \001(\005B\030\310\336\037\000"
    "\342\336\037\006NodeID\332\336\037\006NodeID\022,\n\010store_id\030\002 \001(\005B\032"
    "\310\336\037\000\342\336\037\007StoreID\332\336\037\007StoreID\0220\n\005attrs\030\003 \001("
    "\0132\033.cockroach.proto.AttributesB\004\310\336\037\000\"\242\001\n"
    "\017RangeDescriptor\022\037\n\007raft_id\030\001 \001(\003B\016\310\336\037\000\342"
    "\336\037\006RaftID\022\036\n\tstart_key\030\002 \001(\014B\013\310\336\037\000\332\336\037\003Ke"
    "y\022\034\n\007end_key\030\003 \001(\014B\013\310\336\037\000\332\336\037\003Key\0220\n\010repli"
    "cas\030\004 \003(\0132\030.cockroach.proto.ReplicaB\004\310\336\037"
    "\000\"3\n\010GCPolicy\022\'\n\013ttl_seconds\030\001 \001(\005B\022\310\336\037\000"
    "\342\336\037\nTTLSeconds\"E\n\nAcctConfig\0227\n\ncluster_"
    "id\030\001 \001(\tB#\310\336\037\000\362\336\037\033yaml:\"cluster_id,omite"
    "mpty\"\"h\n\nPermConfig\022+\n\004read\030\001 \003(\tB\035\310\336\037\000\362"
    "\336\037\025yaml:\"read,omitempty\"\022-\n\005write\030\002 \003(\tB"
    "\036\310\336\037\000\362\336\037\026yaml:\"write,omitempty\"\"\257\002\n\nZone"
    "Config\022U\n\rreplica_attrs\030\001 \003(\0132\033.cockroac"
    "h.proto.AttributesB!\310\336\037\000\362\336\037\031yaml:\"replic"
    "as,omitempty\"\022A\n\017range_min_bytes\030\002 \001(\003B("
    "\310\336\037\000\362\336\037 yaml:\"range_min_bytes,omitempty\""
    "\022A\n\017range_max_bytes\030\003 \001(\003B(\310\336\037\000\362\336\037 yaml:"
    "\"range_max_bytes,omitempty\"\022D\n\002gc\030\004 \001(\0132"
    "\031.cockroach.proto.GCPolicyB\035\342\336\037\002GC\362\336\037\023ya"
    "ml:\"gc,omitempty\"\"*\n\tRangeTree\022\035\n\010root_k"
    "ey\030\001 \001(\014B\013\310\336\037\000\332\336\037\003Key\"\226\001\n\rRangeTreeNode\022"
    "\030\n\003key\030\001 \001(\014B\013\310\336\037\000\332\336\037\003Key\022\023\n\005black\030\002 \001(\010"
    "B\004\310\336\037\000\022\037\n\nparent_key\030\003 \001(\014B\013\310\336\037\000\332\336\037\003Key\022"
    "\031\n\010left_key\030\004 \001(\014B\007\332\336\037\003Key\022\032\n\tright_key\030"
    "\005 \001(\014B\007\332\336\037\003KeyB\023Z\005proto\340\342\036\001\310\342\036\001\320\342\036\001", 1195);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cockroach/proto/config.proto", &protobuf_RegisterTypes);
  Attributes::default_instance_ = new Attributes();
  Replica::default_instance_ = new Replica();
  RangeDescriptor::default_instance_ = new RangeDescriptor();
  GCPolicy::default_instance_ = new GCPolicy();
  AcctConfig::default_instance_ = new AcctConfig();
  PermConfig::default_instance_ = new PermConfig();
  ZoneConfig::default_instance_ = new ZoneConfig();
  RangeTree::default_instance_ = new RangeTree();
  RangeTreeNode::default_instance_ = new RangeTreeNode();
  Attributes::default_instance_->InitAsDefaultInstance();
  Replica::default_instance_->InitAsDefaultInstance();
  RangeDescriptor::default_instance_->InitAsDefaultInstance();
  GCPolicy::default_instance_->InitAsDefaultInstance();
  AcctConfig::default_instance_->InitAsDefaultInstance();
  PermConfig::default_instance_->InitAsDefaultInstance();
  ZoneConfig::default_instance_->InitAsDefaultInstance();
  RangeTree::default_instance_->InitAsDefaultInstance();
  RangeTreeNode::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cockroach_2fproto_2fconfig_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cockroach_2fproto_2fconfig_2eproto {
  StaticDescriptorInitializer_cockroach_2fproto_2fconfig_2eproto() {
    protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  }
} static_descriptor_initializer_cockroach_2fproto_2fconfig_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Attributes::kAttrsFieldNumber;
#endif  // !_MSC_VER

Attributes::Attributes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.Attributes)
}

void Attributes::InitAsDefaultInstance() {
}

Attributes::Attributes(const Attributes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.Attributes)
}

void Attributes::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Attributes::~Attributes() {
  // @@protoc_insertion_point(destructor:cockroach.proto.Attributes)
  SharedDtor();
}

void Attributes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Attributes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Attributes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Attributes_descriptor_;
}

const Attributes& Attributes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

Attributes* Attributes::default_instance_ = NULL;

Attributes* Attributes::New() const {
  return new Attributes;
}

void Attributes::Clear() {
  attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Attributes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.Attributes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string attrs = 1;
      case 1: {
        if (tag == 10) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_attrs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->attrs(this->attrs_size() - 1).data(),
            this->attrs(this->attrs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "attrs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_attrs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.Attributes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.Attributes)
  return false;
#undef DO_
}

void Attributes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.Attributes)
  // repeated string attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->attrs(i).data(), this->attrs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "attrs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->attrs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.Attributes)
}

::google::protobuf::uint8* Attributes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.Attributes)
  // repeated string attrs = 1;
  for (int i = 0; i < this->attrs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->attrs(i).data(), this->attrs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "attrs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->attrs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.Attributes)
  return target;
}

int Attributes::ByteSize() const {
  int total_size = 0;

  // repeated string attrs = 1;
  total_size += 1 * this->attrs_size();
  for (int i = 0; i < this->attrs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Attributes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Attributes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Attributes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Attributes::MergeFrom(const Attributes& from) {
  GOOGLE_CHECK_NE(&from, this);
  attrs_.MergeFrom(from.attrs_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Attributes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Attributes::CopyFrom(const Attributes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Attributes::IsInitialized() const {

  return true;
}

void Attributes::Swap(Attributes* other) {
  if (other != this) {
    attrs_.Swap(&other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Attributes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Attributes_descriptor_;
  metadata.reflection = Attributes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Replica::kNodeIdFieldNumber;
const int Replica::kStoreIdFieldNumber;
const int Replica::kAttrsFieldNumber;
#endif  // !_MSC_VER

Replica::Replica()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.Replica)
}

void Replica::InitAsDefaultInstance() {
  attrs_ = const_cast< ::cockroach::proto::Attributes*>(&::cockroach::proto::Attributes::default_instance());
}

Replica::Replica(const Replica& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.Replica)
}

void Replica::SharedCtor() {
  _cached_size_ = 0;
  node_id_ = 0;
  store_id_ = 0;
  attrs_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Replica::~Replica() {
  // @@protoc_insertion_point(destructor:cockroach.proto.Replica)
  SharedDtor();
}

void Replica::SharedDtor() {
  if (this != default_instance_) {
    delete attrs_;
  }
}

void Replica::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Replica::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Replica_descriptor_;
}

const Replica& Replica::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

Replica* Replica::default_instance_ = NULL;

Replica* Replica::New() const {
  return new Replica;
}

void Replica::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Replica*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(node_id_, store_id_);
    if (has_attrs()) {
      if (attrs_ != NULL) attrs_->::cockroach::proto::Attributes::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Replica::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.Replica)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 node_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_id_)));
          set_has_node_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_store_id;
        break;
      }

      // optional int32 store_id = 2;
      case 2: {
        if (tag == 16) {
         parse_store_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &store_id_)));
          set_has_store_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_attrs;
        break;
      }

      // optional .cockroach.proto.Attributes attrs = 3;
      case 3: {
        if (tag == 26) {
         parse_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.Replica)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.Replica)
  return false;
#undef DO_
}

void Replica::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.Replica)
  // optional int32 node_id = 1;
  if (has_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_id(), output);
  }

  // optional int32 store_id = 2;
  if (has_store_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->store_id(), output);
  }

  // optional .cockroach.proto.Attributes attrs = 3;
  if (has_attrs()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->attrs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.Replica)
}

::google::protobuf::uint8* Replica::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.Replica)
  // optional int32 node_id = 1;
  if (has_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_id(), target);
  }

  // optional int32 store_id = 2;
  if (has_store_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->store_id(), target);
  }

  // optional .cockroach.proto.Attributes attrs = 3;
  if (has_attrs()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->attrs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.Replica)
  return target;
}

int Replica::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 node_id = 1;
    if (has_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_id());
    }

    // optional int32 store_id = 2;
    if (has_store_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->store_id());
    }

    // optional .cockroach.proto.Attributes attrs = 3;
    if (has_attrs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->attrs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Replica::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Replica* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Replica*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Replica::MergeFrom(const Replica& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_id()) {
      set_node_id(from.node_id());
    }
    if (from.has_store_id()) {
      set_store_id(from.store_id());
    }
    if (from.has_attrs()) {
      mutable_attrs()->::cockroach::proto::Attributes::MergeFrom(from.attrs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Replica::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Replica::CopyFrom(const Replica& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Replica::IsInitialized() const {

  return true;
}

void Replica::Swap(Replica* other) {
  if (other != this) {
    std::swap(node_id_, other->node_id_);
    std::swap(store_id_, other->store_id_);
    std::swap(attrs_, other->attrs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Replica::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Replica_descriptor_;
  metadata.reflection = Replica_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeDescriptor::kRaftIdFieldNumber;
const int RangeDescriptor::kStartKeyFieldNumber;
const int RangeDescriptor::kEndKeyFieldNumber;
const int RangeDescriptor::kReplicasFieldNumber;
#endif  // !_MSC_VER

RangeDescriptor::RangeDescriptor()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RangeDescriptor)
}

void RangeDescriptor::InitAsDefaultInstance() {
}

RangeDescriptor::RangeDescriptor(const RangeDescriptor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RangeDescriptor)
}

void RangeDescriptor::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  raft_id_ = GOOGLE_LONGLONG(0);
  start_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  end_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeDescriptor::~RangeDescriptor() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RangeDescriptor)
  SharedDtor();
}

void RangeDescriptor::SharedDtor() {
  if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete start_key_;
  }
  if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete end_key_;
  }
  if (this != default_instance_) {
  }
}

void RangeDescriptor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeDescriptor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeDescriptor_descriptor_;
}

const RangeDescriptor& RangeDescriptor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

RangeDescriptor* RangeDescriptor::default_instance_ = NULL;

RangeDescriptor* RangeDescriptor::New() const {
  return new RangeDescriptor;
}

void RangeDescriptor::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    raft_id_ = GOOGLE_LONGLONG(0);
    if (has_start_key()) {
      if (start_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        start_key_->clear();
      }
    }
    if (has_end_key()) {
      if (end_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        end_key_->clear();
      }
    }
  }
  replicas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RangeDescriptor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 raft_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &raft_id_)));
          set_has_raft_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_start_key;
        break;
      }

      // optional bytes start_key = 2;
      case 2: {
        if (tag == 18) {
         parse_start_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_start_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_end_key;
        break;
      }

      // optional bytes end_key = 3;
      case 3: {
        if (tag == 26) {
         parse_end_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_end_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_replicas;
        break;
      }

      // repeated .cockroach.proto.Replica replicas = 4;
      case 4: {
        if (tag == 34) {
         parse_replicas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replicas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_replicas;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RangeDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RangeDescriptor)
  return false;
#undef DO_
}

void RangeDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RangeDescriptor)
  // optional int64 raft_id = 1;
  if (has_raft_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->raft_id(), output);
  }

  // optional bytes start_key = 2;
  if (has_start_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->start_key(), output);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->end_key(), output);
  }

  // repeated .cockroach.proto.Replica replicas = 4;
  for (int i = 0; i < this->replicas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->replicas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RangeDescriptor)
}

::google::protobuf::uint8* RangeDescriptor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RangeDescriptor)
  // optional int64 raft_id = 1;
  if (has_raft_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->raft_id(), target);
  }

  // optional bytes start_key = 2;
  if (has_start_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->start_key(), target);
  }

  // optional bytes end_key = 3;
  if (has_end_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->end_key(), target);
  }

  // repeated .cockroach.proto.Replica replicas = 4;
  for (int i = 0; i < this->replicas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->replicas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RangeDescriptor)
  return target;
}

int RangeDescriptor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 raft_id = 1;
    if (has_raft_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->raft_id());
    }

    // optional bytes start_key = 2;
    if (has_start_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->start_key());
    }

    // optional bytes end_key = 3;
    if (has_end_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->end_key());
    }

  }
  // repeated .cockroach.proto.Replica replicas = 4;
  total_size += 1 * this->replicas_size();
  for (int i = 0; i < this->replicas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replicas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeDescriptor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeDescriptor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeDescriptor::MergeFrom(const RangeDescriptor& from) {
  GOOGLE_CHECK_NE(&from, this);
  replicas_.MergeFrom(from.replicas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raft_id()) {
      set_raft_id(from.raft_id());
    }
    if (from.has_start_key()) {
      set_start_key(from.start_key());
    }
    if (from.has_end_key()) {
      set_end_key(from.end_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeDescriptor::CopyFrom(const RangeDescriptor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeDescriptor::IsInitialized() const {

  return true;
}

void RangeDescriptor::Swap(RangeDescriptor* other) {
  if (other != this) {
    std::swap(raft_id_, other->raft_id_);
    std::swap(start_key_, other->start_key_);
    std::swap(end_key_, other->end_key_);
    replicas_.Swap(&other->replicas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeDescriptor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeDescriptor_descriptor_;
  metadata.reflection = RangeDescriptor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GCPolicy::kTtlSecondsFieldNumber;
#endif  // !_MSC_VER

GCPolicy::GCPolicy()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.GCPolicy)
}

void GCPolicy::InitAsDefaultInstance() {
}

GCPolicy::GCPolicy(const GCPolicy& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.GCPolicy)
}

void GCPolicy::SharedCtor() {
  _cached_size_ = 0;
  ttl_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GCPolicy::~GCPolicy() {
  // @@protoc_insertion_point(destructor:cockroach.proto.GCPolicy)
  SharedDtor();
}

void GCPolicy::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GCPolicy::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GCPolicy::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GCPolicy_descriptor_;
}

const GCPolicy& GCPolicy::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

GCPolicy* GCPolicy::default_instance_ = NULL;

GCPolicy* GCPolicy::New() const {
  return new GCPolicy;
}

void GCPolicy::Clear() {
  ttl_seconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GCPolicy::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.GCPolicy)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ttl_seconds = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ttl_seconds_)));
          set_has_ttl_seconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.GCPolicy)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.GCPolicy)
  return false;
#undef DO_
}

void GCPolicy::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.GCPolicy)
  // optional int32 ttl_seconds = 1;
  if (has_ttl_seconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ttl_seconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.GCPolicy)
}

::google::protobuf::uint8* GCPolicy::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.GCPolicy)
  // optional int32 ttl_seconds = 1;
  if (has_ttl_seconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ttl_seconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.GCPolicy)
  return target;
}

int GCPolicy::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ttl_seconds = 1;
    if (has_ttl_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ttl_seconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GCPolicy::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GCPolicy* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GCPolicy*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GCPolicy::MergeFrom(const GCPolicy& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ttl_seconds()) {
      set_ttl_seconds(from.ttl_seconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GCPolicy::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GCPolicy::CopyFrom(const GCPolicy& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GCPolicy::IsInitialized() const {

  return true;
}

void GCPolicy::Swap(GCPolicy* other) {
  if (other != this) {
    std::swap(ttl_seconds_, other->ttl_seconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GCPolicy::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GCPolicy_descriptor_;
  metadata.reflection = GCPolicy_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcctConfig::kClusterIdFieldNumber;
#endif  // !_MSC_VER

AcctConfig::AcctConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.AcctConfig)
}

void AcctConfig::InitAsDefaultInstance() {
}

AcctConfig::AcctConfig(const AcctConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.AcctConfig)
}

void AcctConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  cluster_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcctConfig::~AcctConfig() {
  // @@protoc_insertion_point(destructor:cockroach.proto.AcctConfig)
  SharedDtor();
}

void AcctConfig::SharedDtor() {
  if (cluster_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cluster_id_;
  }
  if (this != default_instance_) {
  }
}

void AcctConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcctConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcctConfig_descriptor_;
}

const AcctConfig& AcctConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

AcctConfig* AcctConfig::default_instance_ = NULL;

AcctConfig* AcctConfig::New() const {
  return new AcctConfig;
}

void AcctConfig::Clear() {
  if (has_cluster_id()) {
    if (cluster_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      cluster_id_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcctConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.AcctConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string cluster_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cluster_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cluster_id().data(), this->cluster_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cluster_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.AcctConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.AcctConfig)
  return false;
#undef DO_
}

void AcctConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.AcctConfig)
  // optional string cluster_id = 1;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->cluster_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.AcctConfig)
}

::google::protobuf::uint8* AcctConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.AcctConfig)
  // optional string cluster_id = 1;
  if (has_cluster_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cluster_id().data(), this->cluster_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cluster_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cluster_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.AcctConfig)
  return target;
}

int AcctConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string cluster_id = 1;
    if (has_cluster_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cluster_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcctConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcctConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcctConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcctConfig::MergeFrom(const AcctConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cluster_id()) {
      set_cluster_id(from.cluster_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcctConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcctConfig::CopyFrom(const AcctConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcctConfig::IsInitialized() const {

  return true;
}

void AcctConfig::Swap(AcctConfig* other) {
  if (other != this) {
    std::swap(cluster_id_, other->cluster_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcctConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcctConfig_descriptor_;
  metadata.reflection = AcctConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PermConfig::kReadFieldNumber;
const int PermConfig::kWriteFieldNumber;
#endif  // !_MSC_VER

PermConfig::PermConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.PermConfig)
}

void PermConfig::InitAsDefaultInstance() {
}

PermConfig::PermConfig(const PermConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.PermConfig)
}

void PermConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PermConfig::~PermConfig() {
  // @@protoc_insertion_point(destructor:cockroach.proto.PermConfig)
  SharedDtor();
}

void PermConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PermConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PermConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PermConfig_descriptor_;
}

const PermConfig& PermConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

PermConfig* PermConfig::default_instance_ = NULL;

PermConfig* PermConfig::New() const {
  return new PermConfig;
}

void PermConfig::Clear() {
  read_.Clear();
  write_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PermConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.PermConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string read = 1;
      case 1: {
        if (tag == 10) {
         parse_read:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_read()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->read(this->read_size() - 1).data(),
            this->read(this->read_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "read");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_read;
        if (input->ExpectTag(18)) goto parse_write;
        break;
      }

      // repeated string write = 2;
      case 2: {
        if (tag == 18) {
         parse_write:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_write()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->write(this->write_size() - 1).data(),
            this->write(this->write_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "write");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_write;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.PermConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.PermConfig)
  return false;
#undef DO_
}

void PermConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.PermConfig)
  // repeated string read = 1;
  for (int i = 0; i < this->read_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->read(i).data(), this->read(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "read");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->read(i), output);
  }

  // repeated string write = 2;
  for (int i = 0; i < this->write_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->write(i).data(), this->write(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "write");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->write(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.PermConfig)
}

::google::protobuf::uint8* PermConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.PermConfig)
  // repeated string read = 1;
  for (int i = 0; i < this->read_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->read(i).data(), this->read(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "read");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->read(i), target);
  }

  // repeated string write = 2;
  for (int i = 0; i < this->write_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->write(i).data(), this->write(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "write");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->write(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.PermConfig)
  return target;
}

int PermConfig::ByteSize() const {
  int total_size = 0;

  // repeated string read = 1;
  total_size += 1 * this->read_size();
  for (int i = 0; i < this->read_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->read(i));
  }

  // repeated string write = 2;
  total_size += 1 * this->write_size();
  for (int i = 0; i < this->write_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->write(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PermConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PermConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PermConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PermConfig::MergeFrom(const PermConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  read_.MergeFrom(from.read_);
  write_.MergeFrom(from.write_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PermConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PermConfig::CopyFrom(const PermConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermConfig::IsInitialized() const {

  return true;
}

void PermConfig::Swap(PermConfig* other) {
  if (other != this) {
    read_.Swap(&other->read_);
    write_.Swap(&other->write_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PermConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PermConfig_descriptor_;
  metadata.reflection = PermConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZoneConfig::kReplicaAttrsFieldNumber;
const int ZoneConfig::kRangeMinBytesFieldNumber;
const int ZoneConfig::kRangeMaxBytesFieldNumber;
const int ZoneConfig::kGcFieldNumber;
#endif  // !_MSC_VER

ZoneConfig::ZoneConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.ZoneConfig)
}

void ZoneConfig::InitAsDefaultInstance() {
  gc_ = const_cast< ::cockroach::proto::GCPolicy*>(&::cockroach::proto::GCPolicy::default_instance());
}

ZoneConfig::ZoneConfig(const ZoneConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.ZoneConfig)
}

void ZoneConfig::SharedCtor() {
  _cached_size_ = 0;
  range_min_bytes_ = GOOGLE_LONGLONG(0);
  range_max_bytes_ = GOOGLE_LONGLONG(0);
  gc_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZoneConfig::~ZoneConfig() {
  // @@protoc_insertion_point(destructor:cockroach.proto.ZoneConfig)
  SharedDtor();
}

void ZoneConfig::SharedDtor() {
  if (this != default_instance_) {
    delete gc_;
  }
}

void ZoneConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZoneConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZoneConfig_descriptor_;
}

const ZoneConfig& ZoneConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

ZoneConfig* ZoneConfig::default_instance_ = NULL;

ZoneConfig* ZoneConfig::New() const {
  return new ZoneConfig;
}

void ZoneConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZoneConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 14) {
    ZR_(range_min_bytes_, range_max_bytes_);
    if (has_gc()) {
      if (gc_ != NULL) gc_->::cockroach::proto::GCPolicy::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  replica_attrs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZoneConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.ZoneConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .cockroach.proto.Attributes replica_attrs = 1;
      case 1: {
        if (tag == 10) {
         parse_replica_attrs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_replica_attrs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_replica_attrs;
        if (input->ExpectTag(16)) goto parse_range_min_bytes;
        break;
      }

      // optional int64 range_min_bytes = 2;
      case 2: {
        if (tag == 16) {
         parse_range_min_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_min_bytes_)));
          set_has_range_min_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_range_max_bytes;
        break;
      }

      // optional int64 range_max_bytes = 3;
      case 3: {
        if (tag == 24) {
         parse_range_max_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &range_max_bytes_)));
          set_has_range_max_bytes();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gc;
        break;
      }

      // optional .cockroach.proto.GCPolicy gc = 4;
      case 4: {
        if (tag == 34) {
         parse_gc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gc()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.ZoneConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.ZoneConfig)
  return false;
#undef DO_
}

void ZoneConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.ZoneConfig)
  // repeated .cockroach.proto.Attributes replica_attrs = 1;
  for (int i = 0; i < this->replica_attrs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->replica_attrs(i), output);
  }

  // optional int64 range_min_bytes = 2;
  if (has_range_min_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->range_min_bytes(), output);
  }

  // optional int64 range_max_bytes = 3;
  if (has_range_max_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->range_max_bytes(), output);
  }

  // optional .cockroach.proto.GCPolicy gc = 4;
  if (has_gc()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.ZoneConfig)
}

::google::protobuf::uint8* ZoneConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.ZoneConfig)
  // repeated .cockroach.proto.Attributes replica_attrs = 1;
  for (int i = 0; i < this->replica_attrs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->replica_attrs(i), target);
  }

  // optional int64 range_min_bytes = 2;
  if (has_range_min_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->range_min_bytes(), target);
  }

  // optional int64 range_max_bytes = 3;
  if (has_range_max_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->range_max_bytes(), target);
  }

  // optional .cockroach.proto.GCPolicy gc = 4;
  if (has_gc()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.ZoneConfig)
  return target;
}

int ZoneConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 range_min_bytes = 2;
    if (has_range_min_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_min_bytes());
    }

    // optional int64 range_max_bytes = 3;
    if (has_range_max_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->range_max_bytes());
    }

    // optional .cockroach.proto.GCPolicy gc = 4;
    if (has_gc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gc());
    }

  }
  // repeated .cockroach.proto.Attributes replica_attrs = 1;
  total_size += 1 * this->replica_attrs_size();
  for (int i = 0; i < this->replica_attrs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->replica_attrs(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZoneConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZoneConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZoneConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZoneConfig::MergeFrom(const ZoneConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  replica_attrs_.MergeFrom(from.replica_attrs_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_range_min_bytes()) {
      set_range_min_bytes(from.range_min_bytes());
    }
    if (from.has_range_max_bytes()) {
      set_range_max_bytes(from.range_max_bytes());
    }
    if (from.has_gc()) {
      mutable_gc()->::cockroach::proto::GCPolicy::MergeFrom(from.gc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZoneConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZoneConfig::CopyFrom(const ZoneConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZoneConfig::IsInitialized() const {

  return true;
}

void ZoneConfig::Swap(ZoneConfig* other) {
  if (other != this) {
    replica_attrs_.Swap(&other->replica_attrs_);
    std::swap(range_min_bytes_, other->range_min_bytes_);
    std::swap(range_max_bytes_, other->range_max_bytes_);
    std::swap(gc_, other->gc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZoneConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZoneConfig_descriptor_;
  metadata.reflection = ZoneConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeTree::kRootKeyFieldNumber;
#endif  // !_MSC_VER

RangeTree::RangeTree()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RangeTree)
}

void RangeTree::InitAsDefaultInstance() {
}

RangeTree::RangeTree(const RangeTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RangeTree)
}

void RangeTree::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  root_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeTree::~RangeTree() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RangeTree)
  SharedDtor();
}

void RangeTree::SharedDtor() {
  if (root_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete root_key_;
  }
  if (this != default_instance_) {
  }
}

void RangeTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeTree_descriptor_;
}

const RangeTree& RangeTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

RangeTree* RangeTree::default_instance_ = NULL;

RangeTree* RangeTree::New() const {
  return new RangeTree;
}

void RangeTree::Clear() {
  if (has_root_key()) {
    if (root_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      root_key_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RangeTree)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes root_key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_root_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RangeTree)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RangeTree)
  return false;
#undef DO_
}

void RangeTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RangeTree)
  // optional bytes root_key = 1;
  if (has_root_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->root_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RangeTree)
}

::google::protobuf::uint8* RangeTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RangeTree)
  // optional bytes root_key = 1;
  if (has_root_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->root_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RangeTree)
  return target;
}

int RangeTree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes root_key = 1;
    if (has_root_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->root_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeTree::MergeFrom(const RangeTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_root_key()) {
      set_root_key(from.root_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeTree::CopyFrom(const RangeTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeTree::IsInitialized() const {

  return true;
}

void RangeTree::Swap(RangeTree* other) {
  if (other != this) {
    std::swap(root_key_, other->root_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeTree_descriptor_;
  metadata.reflection = RangeTree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RangeTreeNode::kKeyFieldNumber;
const int RangeTreeNode::kBlackFieldNumber;
const int RangeTreeNode::kParentKeyFieldNumber;
const int RangeTreeNode::kLeftKeyFieldNumber;
const int RangeTreeNode::kRightKeyFieldNumber;
#endif  // !_MSC_VER

RangeTreeNode::RangeTreeNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:cockroach.proto.RangeTreeNode)
}

void RangeTreeNode::InitAsDefaultInstance() {
}

RangeTreeNode::RangeTreeNode(const RangeTreeNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:cockroach.proto.RangeTreeNode)
}

void RangeTreeNode::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  black_ = false;
  parent_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  left_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  right_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RangeTreeNode::~RangeTreeNode() {
  // @@protoc_insertion_point(destructor:cockroach.proto.RangeTreeNode)
  SharedDtor();
}

void RangeTreeNode::SharedDtor() {
  if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (parent_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete parent_key_;
  }
  if (left_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete left_key_;
  }
  if (right_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete right_key_;
  }
  if (this != default_instance_) {
  }
}

void RangeTreeNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RangeTreeNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RangeTreeNode_descriptor_;
}

const RangeTreeNode& RangeTreeNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cockroach_2fproto_2fconfig_2eproto();
  return *default_instance_;
}

RangeTreeNode* RangeTreeNode::default_instance_ = NULL;

RangeTreeNode* RangeTreeNode::New() const {
  return new RangeTreeNode;
}

void RangeTreeNode::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    black_ = false;
    if (has_parent_key()) {
      if (parent_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        parent_key_->clear();
      }
    }
    if (has_left_key()) {
      if (left_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        left_key_->clear();
      }
    }
    if (has_right_key()) {
      if (right_key_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        right_key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RangeTreeNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:cockroach.proto.RangeTreeNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_black;
        break;
      }

      // optional bool black = 2;
      case 2: {
        if (tag == 16) {
         parse_black:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &black_)));
          set_has_black();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_parent_key;
        break;
      }

      // optional bytes parent_key = 3;
      case 3: {
        if (tag == 26) {
         parse_parent_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_parent_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_left_key;
        break;
      }

      // optional bytes left_key = 4;
      case 4: {
        if (tag == 34) {
         parse_left_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_left_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_right_key;
        break;
      }

      // optional bytes right_key = 5;
      case 5: {
        if (tag == 42) {
         parse_right_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_right_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:cockroach.proto.RangeTreeNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:cockroach.proto.RangeTreeNode)
  return false;
#undef DO_
}

void RangeTreeNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:cockroach.proto.RangeTreeNode)
  // optional bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // optional bool black = 2;
  if (has_black()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->black(), output);
  }

  // optional bytes parent_key = 3;
  if (has_parent_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->parent_key(), output);
  }

  // optional bytes left_key = 4;
  if (has_left_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->left_key(), output);
  }

  // optional bytes right_key = 5;
  if (has_right_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->right_key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:cockroach.proto.RangeTreeNode)
}

::google::protobuf::uint8* RangeTreeNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:cockroach.proto.RangeTreeNode)
  // optional bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // optional bool black = 2;
  if (has_black()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->black(), target);
  }

  // optional bytes parent_key = 3;
  if (has_parent_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->parent_key(), target);
  }

  // optional bytes left_key = 4;
  if (has_left_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->left_key(), target);
  }

  // optional bytes right_key = 5;
  if (has_right_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->right_key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:cockroach.proto.RangeTreeNode)
  return target;
}

int RangeTreeNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional bool black = 2;
    if (has_black()) {
      total_size += 1 + 1;
    }

    // optional bytes parent_key = 3;
    if (has_parent_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->parent_key());
    }

    // optional bytes left_key = 4;
    if (has_left_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->left_key());
    }

    // optional bytes right_key = 5;
    if (has_right_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->right_key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RangeTreeNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RangeTreeNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RangeTreeNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RangeTreeNode::MergeFrom(const RangeTreeNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_black()) {
      set_black(from.black());
    }
    if (from.has_parent_key()) {
      set_parent_key(from.parent_key());
    }
    if (from.has_left_key()) {
      set_left_key(from.left_key());
    }
    if (from.has_right_key()) {
      set_right_key(from.right_key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RangeTreeNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RangeTreeNode::CopyFrom(const RangeTreeNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RangeTreeNode::IsInitialized() const {

  return true;
}

void RangeTreeNode::Swap(RangeTreeNode* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(black_, other->black_);
    std::swap(parent_key_, other->parent_key_);
    std::swap(left_key_, other->left_key_);
    std::swap(right_key_, other->right_key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RangeTreeNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RangeTreeNode_descriptor_;
  metadata.reflection = RangeTreeNode_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace cockroach

// @@protoc_insertion_point(global_scope)
